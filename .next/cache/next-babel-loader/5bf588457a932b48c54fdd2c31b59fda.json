{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"D:\\\\workspaces\\\\mydaystatus - Usando Next js\\\\pages\\\\app.js\";\n\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport router from 'next/router';\n\n//useEffect é para criar uma função\n//router é como <href>\n\n/*Na tela vai pegar o retorno do login quando não\r\nnão conectado*/\nvar App = function App(props) {\n  useEffect(function () {\n    if (!props.isAuth) {\n      router.push('/');\n    }\n\n    if (!props.isAuth) {\n      return null;\n    }\n  });\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }\n  }, __jsx(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }\n  }, \"App\"), __jsx(\"pre\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }\n  }, JSON.stringify(props, null, 2)));\n};\n\nexport var __N_SSP = true;\nexport default App; //Servidor que recebe a validação da conexão, não vai para o frontEnd","map":{"version":3,"sources":["D:/workspaces/mydaystatus - Usando Next js/pages/app.js"],"names":["React","useEffect","router","App","props","isAuth","push","JSON","stringify"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAgC,OAAhC;AAEA,OAAOC,MAAP,MAAmB,aAAnB;;AAEA;AACA;;AAEA;;AAEA,IAAMC,GAAG,GAAG,SAANA,GAAM,CAAAC,KAAK,EAAG;AAChBH,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAG,CAACG,KAAK,CAACC,MAAV,EAAiB;AACbH,MAAAA,MAAM,CAACI,IAAP,CAAY,GAAZ;AACH;;AACD,QAAG,CAACF,KAAK,CAACC,MAAV,EAAiB;AACb,aAAO,IAAP;AACH;AACJ,GAPQ,CAAT;AAQA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAME,IAAI,CAACC,SAAL,CAAeJ,KAAf,EAAsB,IAAtB,EAA4B,CAA5B,CAAN,CAFJ,CADJ;AAMH,CAfD;;;AAgBA,eAAeD,GAAf,C,CAGA","sourcesContent":["import React, { useEffect} from 'react'\r\nimport auth0 from \"../lib/auth0\"\r\nimport router from 'next/router'\r\nimport { db } from '../lib/db'\r\n//useEffect é para criar uma função\r\n//router é como <href>\r\n\r\n/*Na tela vai pegar o retorno do login quando não\r\nnão conectado*/\r\nconst App = props =>{\r\n    useEffect(() => {\r\n        if(!props.isAuth){\r\n            router.push('/')\r\n        }\r\n        if(!props.isAuth){\r\n            return null\r\n        }\r\n    })\r\n    return(\r\n        <div>\r\n            <h1>App</h1>\r\n            <pre>{JSON.stringify(props, null, 2)}</pre>\r\n        </div>\r\n    )\r\n}\r\nexport default App\r\n\r\n\r\n//Servidor que recebe a validação da conexão, não vai para o frontEnd\r\nexport async function getServerSideProps ({ req, res }){\r\n    const session = await auth0.getSession(req)\r\n    if (session){//aqui existe o usuário\r\n        const todaysCheckin = await db\r\n                            .collection('markers')\r\n                            .doc('2020-06-10')\r\n                            .collection('checks')\r\n                            .doc(session.user.sub)//quando o usu. conecta\r\n                            .get()\r\n        const todaysData = todaysCheckin.data()\r\n        //variavel para constrolar se tem checkins\r\n        let forceCreate = true\r\n        if(todaysData){\r\n            //valor verdadeiro pode outros checkins\r\n            forceCreate = false\r\n        }\r\n\r\n        return{\r\n            props:{\r\n                //caso a pessoa não loge\r\n                //se user for verdadeiro\r\n                isAuth: true,\r\n                user: session.user,\r\n                forceCreate\r\n            }\r\n        }\r\n    }\r\n    return{\r\n        props:{//Caso a pessoa não logou volta falso\r\n            isAuth: false,\r\n            user: {}\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}