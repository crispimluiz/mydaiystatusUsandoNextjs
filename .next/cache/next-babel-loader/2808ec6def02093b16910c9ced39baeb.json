{"ast":null,"code":"var _jsxFileName = \"D:\\\\workspaces\\\\mydaystatus - Usando Next js\\\\pages\\\\app.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport auth0 from \"../lib/auth0\";\nimport router from 'next/router';\nimport { db } from '../lib/db'; //useEffect é para criar uma função\n//router é como <href>\n\n/*Na tela vai pegar o retorno do login quando não\r\nnão conectado*/\n\nconst App = props => {\n  useEffect(() => {\n    if (!props.isAuth) {\n      router.push('/');\n    }\n\n    if (!props.isAuth) {\n      return null;\n    }\n  });\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }\n  }, \"App\"), __jsx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }\n  }, JSON.stringify(props, null, 2)));\n};\n\nexport default App; //Servidor que recebe a validação da conexão, não vai para o frontEnd\n\nexport async function getServerSideProps({\n  req,\n  res\n}) {\n  const session = await auth0.getSession(req);\n\n  if (session) {\n    //aqui existe o usuário\n    const todaysCheckin = await db.collection('markers').doc('2020-06-10').collection('checks').doc(session.user.sub) //quando o usu. conecta\n    .get();\n    console.log(todaysCheckin.data());\n    return {\n      props: {\n        //caso a pessoa não loge\n        //se user for verdadeiro\n        isAuth: true,\n        user: session.user\n      }\n    };\n  }\n\n  return {\n    props: {\n      //Caso a pessoa não logou volta falso\n      isAuth: false,\n      user: {}\n    }\n  };\n}","map":{"version":3,"sources":["D:/workspaces/mydaystatus - Usando Next js/pages/app.js"],"names":["React","useEffect","auth0","router","db","App","props","isAuth","push","JSON","stringify","getServerSideProps","req","res","session","getSession","todaysCheckin","collection","doc","user","sub","get","console","log","data"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAgC,OAAhC;AACA,OAAOC,KAAP,MAAkB,cAAlB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,SAASC,EAAT,QAAmB,WAAnB,C,CACA;AACA;;AAEA;;;AAEA,MAAMC,GAAG,GAAGC,KAAK,IAAG;AAChBL,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAG,CAACK,KAAK,CAACC,MAAV,EAAiB;AACbJ,MAAAA,MAAM,CAACK,IAAP,CAAY,GAAZ;AACH;;AACD,QAAG,CAACF,KAAK,CAACC,MAAV,EAAiB;AACb,aAAO,IAAP;AACH;AACJ,GAPQ,CAAT;AAQA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAME,IAAI,CAACC,SAAL,CAAeJ,KAAf,EAAsB,IAAtB,EAA4B,CAA5B,CAAN,CAFJ,CADJ;AAMH,CAfD;;AAgBA,eAAeD,GAAf,C,CAGA;;AACA,OAAO,eAAeM,kBAAf,CAAmC;AAAEC,EAAAA,GAAF;AAAOC,EAAAA;AAAP,CAAnC,EAAgD;AACnD,QAAMC,OAAO,GAAG,MAAMZ,KAAK,CAACa,UAAN,CAAiBH,GAAjB,CAAtB;;AACA,MAAIE,OAAJ,EAAY;AAAC;AACT,UAAME,aAAa,GAAG,MAAMZ,EAAE,CACTa,UADO,CACI,SADJ,EAEPC,GAFO,CAEH,YAFG,EAGPD,UAHO,CAGI,QAHJ,EAIPC,GAJO,CAIHJ,OAAO,CAACK,IAAR,CAAaC,GAJV,EAIc;AAJd,KAKPC,GALO,EAA5B;AAMAC,IAAAA,OAAO,CAACC,GAAR,CAAYP,aAAa,CAACQ,IAAd,EAAZ;AAEA,WAAM;AACFlB,MAAAA,KAAK,EAAC;AACF;AACA;AACAC,QAAAA,MAAM,EAAE,IAHN;AAIFY,QAAAA,IAAI,EAAEL,OAAO,CAACK;AAJZ;AADJ,KAAN;AAQH;;AACD,SAAM;AACFb,IAAAA,KAAK,EAAC;AAAC;AACHC,MAAAA,MAAM,EAAE,KADN;AAEFY,MAAAA,IAAI,EAAE;AAFJ;AADJ,GAAN;AAMH","sourcesContent":["import React, { useEffect} from 'react'\r\nimport auth0 from \"../lib/auth0\"\r\nimport router from 'next/router'\r\nimport { db } from '../lib/db'\r\n//useEffect é para criar uma função\r\n//router é como <href>\r\n\r\n/*Na tela vai pegar o retorno do login quando não\r\nnão conectado*/\r\nconst App = props =>{\r\n    useEffect(() => {\r\n        if(!props.isAuth){\r\n            router.push('/')\r\n        }\r\n        if(!props.isAuth){\r\n            return null\r\n        }\r\n    })\r\n    return(\r\n        <div>\r\n            <h1>App</h1>\r\n            <pre>{JSON.stringify(props, null, 2)}</pre>\r\n        </div>\r\n    )\r\n}\r\nexport default App\r\n\r\n\r\n//Servidor que recebe a validação da conexão, não vai para o frontEnd\r\nexport async function getServerSideProps ({ req, res }){\r\n    const session = await auth0.getSession(req)\r\n    if (session){//aqui existe o usuário\r\n        const todaysCheckin = await db\r\n                            .collection('markers')\r\n                            .doc('2020-06-10')\r\n                            .collection('checks')\r\n                            .doc(session.user.sub)//quando o usu. conecta\r\n                            .get()\r\n        console.log(todaysCheckin.data())\r\n\r\n        return{\r\n            props:{\r\n                //caso a pessoa não loge\r\n                //se user for verdadeiro\r\n                isAuth: true,\r\n                user: session.user\r\n            }\r\n        }\r\n    }\r\n    return{\r\n        props:{//Caso a pessoa não logou volta falso\r\n            isAuth: false,\r\n            user: {}\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}