{"version":3,"file":"static/webpack/static\\development\\pages\\app.js.77c60b1a7aad77b993ab.hot-update.js","sources":["webpack:///./pages/app.js"],"sourcesContent":["import React, { useEffect} from 'react'\r\nimport auth0 from \"../lib/auth0\"\r\nimport router from 'next/router'\r\nimport { db } from '../lib/db'\r\n//useEffect é para criar uma função\r\n//router é como <href>\r\n\r\n/*Na tela vai pegar o retorno do login quando não\r\nnão conectado*/\r\nconst App = props => {\r\n    useEffect(() => {\r\n      if (!props.isAuth) {\r\n        router.push('/')\r\n      } else if (props.forceCreate) {\r\n        router.push('/create-status')\r\n      }\r\n    })\r\n    if (!props.isAuth || props.forceCreate) {\r\n      return null\r\n    }\r\n    return(\r\n        <div>\r\n            <h1>App</h1>\r\n            <pre>{JSON.stringify(props, null, 2)}</pre>\r\n        </div>\r\n    )\r\n}\r\nexport default App\r\n\r\n\r\n//Servidor que recebe a validação da conexão, não vai para o frontEnd\r\nexport async function getServerSideProps ({ req, res }){\r\n    const session = await auth0.getSession(req)\r\n    const today = new Date()//linha 9 e 10 para pegar a data\r\n        const currentDate = \r\n            today.getFullYear() + '-' + today.getMonth() + '-' + today.getDay()\r\n    if (session){//aqui existe o usuário\r\n        const { user } = session;\r\n        const todaysCheckin = await db\r\n                .collection(\"markers\")\r\n                .doc(currentDate)\r\n                .collection(\"checks\")\r\n                .doc(user.sub)\r\n                .get();\r\n        const todaysData = todaysCheckin.data()\r\n        //variavel para constrolar se tem checkins\r\n        let forceCreate = true//começa verdadeiro\r\n        if(todaysData){\r\n            // se tem se torna false\r\n            //permanecer true não tem\r\n            forceCreate = false\r\n            //Trás nossa localização\r\n            const checkins = await db\r\n                .collection('markers')\r\n                .doc(currentDate)\r\n                .collection('checks')\r\n            //verifica os próximos\r\n            .near({\r\n            center: todaysData.coordinates,\r\n            radius: 1000//mil metros\r\n            })\r\n            .get()\r\n            //varrer os arquivos para pegar os dados.\r\n            checkins.docs.forEach(doc => {\r\n\r\n            })\r\n        }\r\n\r\n        return{\r\n            props:{\r\n                //caso a pessoa não loge\r\n                //se user for verdadeiro\r\n                isAuth: true,\r\n                user: session.user,\r\n                forceCreate\r\n            }\r\n        }\r\n    }\r\n    return{\r\n        props:{//Caso a pessoa não logou volta falso\r\n            isAuth: false,\r\n            user: {}\r\n        }\r\n    }\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;;AAAA;;;;A","sourceRoot":""}