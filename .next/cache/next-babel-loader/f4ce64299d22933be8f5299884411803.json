{"ast":null,"code":"var _jsxFileName = \"D:\\\\workspaces\\\\mydaystatus - Usando Next js\\\\pages\\\\app.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport auth0 from \"../lib/auth0\";\nimport router from 'next/router';\nimport { db } from '../lib/db'; //useEffect é para criar uma função\n//router é como <href>\n\n/*Na tela vai pegar o retorno do login quando não\r\nnão conectado*/\n\nconst App = props => {\n  useEffect(() => {\n    if (!props.isAuth) {\n      router.push('/');\n    } else if (props.forceCreate) {\n      router.push('/create-status');\n    }\n  });\n\n  if (!props.isAuth || props.forceCreate) {\n    return null;\n  }\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }\n  }, \"App\"), __jsx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }\n  }, JSON.stringify(props, null, 2)));\n};\n\nexport default App; //Servidor que recebe a validação da conexão, não vai para o frontEnd\n\nexport async function getServerSideProps({\n  req,\n  res\n}) {\n  const session = await auth0.getSession(req);\n  const today = new Date(); //linha 9 e 10 para pegar a data\n\n  const currentDate = today.getFullYear() + '-' + today.getMonth() + '-' + today.getDay();\n\n  if (session) {\n    //aqui existe o usuário\n    const {\n      user\n    } = session;\n    const todaysCheckin = await db.collection(\"markers\").doc(currentDate).collection(\"checks\").doc(user.sub).get();\n    const todaysData = todaysCheckin.data(); //variavel para constrolar se tem checkins\n\n    let forceCreate = true; //começa verdadeiro\n\n    if (todaysData) {\n      // se tem se torna false\n      //permanecer true não tem\n      forceCreate = false; //Trás nossa localização\n\n      const checkins = await db.collection('markers').doc(currentDate).collection('checks') //verifica os próximos\n      .near({\n        center: todaysData.coordinates,\n        radius: 1000 //mil metros\n\n      }).get(); //varrer os arquivos para pegar os dados.\n\n      checkins.docs.forEach(doc => {});\n    }\n\n    return {\n      props: {\n        //caso a pessoa não loge\n        //se user for verdadeiro\n        isAuth: true,\n        user: session.user,\n        forceCreate\n      }\n    };\n  }\n\n  return {\n    props: {\n      //Caso a pessoa não logou volta falso\n      isAuth: false,\n      user: {}\n    }\n  };\n}","map":{"version":3,"sources":["D:/workspaces/mydaystatus - Usando Next js/pages/app.js"],"names":["React","useEffect","auth0","router","db","App","props","isAuth","push","forceCreate","JSON","stringify","getServerSideProps","req","res","session","getSession","today","Date","currentDate","getFullYear","getMonth","getDay","user","todaysCheckin","collection","doc","sub","get","todaysData","data","checkins","near","center","coordinates","radius","docs","forEach"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAgC,OAAhC;AACA,OAAOC,KAAP,MAAkB,cAAlB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,SAASC,EAAT,QAAmB,WAAnB,C,CACA;AACA;;AAEA;;;AAEA,MAAMC,GAAG,GAAGC,KAAK,IAAI;AACjBL,EAAAA,SAAS,CAAC,MAAM;AAChB,QAAI,CAACK,KAAK,CAACC,MAAX,EAAmB;AACfJ,MAAAA,MAAM,CAACK,IAAP,CAAY,GAAZ;AACH,KAFD,MAEO,IAAIF,KAAK,CAACG,WAAV,EAAuB;AAC1BN,MAAAA,MAAM,CAACK,IAAP,CAAY,gBAAZ;AACH;AACA,GANQ,CAAT;;AAOA,MAAI,CAACF,KAAK,CAACC,MAAP,IAAiBD,KAAK,CAACG,WAA3B,EAAwC;AACxC,WAAO,IAAP;AACC;;AACD,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMC,IAAI,CAACC,SAAL,CAAeL,KAAf,EAAsB,IAAtB,EAA4B,CAA5B,CAAN,CAFJ,CADJ;AAMH,CAjBD;;AAkBA,eAAeD,GAAf,C,CAGA;;AACA,OAAO,eAAeO,kBAAf,CAAmC;AAAEC,EAAAA,GAAF;AAAOC,EAAAA;AAAP,CAAnC,EAAgD;AACnD,QAAMC,OAAO,GAAG,MAAMb,KAAK,CAACc,UAAN,CAAiBH,GAAjB,CAAtB;AACA,QAAMI,KAAK,GAAG,IAAIC,IAAJ,EAAd,CAFmD,CAE3B;;AACpB,QAAMC,WAAW,GACbF,KAAK,CAACG,WAAN,KAAsB,GAAtB,GAA4BH,KAAK,CAACI,QAAN,EAA5B,GAA+C,GAA/C,GAAqDJ,KAAK,CAACK,MAAN,EADzD;;AAEJ,MAAIP,OAAJ,EAAY;AAAC;AACT,UAAM;AAAEQ,MAAAA;AAAF,QAAWR,OAAjB;AACA,UAAMS,aAAa,GAAG,MAAMpB,EAAE,CACrBqB,UADmB,CACR,SADQ,EAEnBC,GAFmB,CAEfP,WAFe,EAGnBM,UAHmB,CAGR,QAHQ,EAInBC,GAJmB,CAIfH,IAAI,CAACI,GAJU,EAKnBC,GALmB,EAA5B;AAMA,UAAMC,UAAU,GAAGL,aAAa,CAACM,IAAd,EAAnB,CARQ,CASR;;AACA,QAAIrB,WAAW,GAAG,IAAlB,CAVQ,CAUc;;AACtB,QAAGoB,UAAH,EAAc;AACV;AACA;AACApB,MAAAA,WAAW,GAAG,KAAd,CAHU,CAIV;;AACA,YAAMsB,QAAQ,GAAG,MAAM3B,EAAE,CACpBqB,UADkB,CACP,SADO,EAElBC,GAFkB,CAEdP,WAFc,EAGlBM,UAHkB,CAGP,QAHO,EAIvB;AAJuB,OAKtBO,IALsB,CAKjB;AACNC,QAAAA,MAAM,EAAEJ,UAAU,CAACK,WADb;AAENC,QAAAA,MAAM,EAAE,IAFF,CAEM;;AAFN,OALiB,EAStBP,GATsB,EAAvB,CALU,CAeV;;AACAG,MAAAA,QAAQ,CAACK,IAAT,CAAcC,OAAd,CAAsBX,GAAG,IAAI,CAE5B,CAFD;AAGH;;AAED,WAAM;AACFpB,MAAAA,KAAK,EAAC;AACF;AACA;AACAC,QAAAA,MAAM,EAAE,IAHN;AAIFgB,QAAAA,IAAI,EAAER,OAAO,CAACQ,IAJZ;AAKFd,QAAAA;AALE;AADJ,KAAN;AASH;;AACD,SAAM;AACFH,IAAAA,KAAK,EAAC;AAAC;AACHC,MAAAA,MAAM,EAAE,KADN;AAEFgB,MAAAA,IAAI,EAAE;AAFJ;AADJ,GAAN;AAMH","sourcesContent":["import React, { useEffect} from 'react'\r\nimport auth0 from \"../lib/auth0\"\r\nimport router from 'next/router'\r\nimport { db } from '../lib/db'\r\n//useEffect é para criar uma função\r\n//router é como <href>\r\n\r\n/*Na tela vai pegar o retorno do login quando não\r\nnão conectado*/\r\nconst App = props => {\r\n    useEffect(() => {\r\n    if (!props.isAuth) {\r\n        router.push('/')\r\n    } else if (props.forceCreate) {\r\n        router.push('/create-status')\r\n    }\r\n    })\r\n    if (!props.isAuth || props.forceCreate) {\r\n    return null\r\n    }\r\n    return(\r\n        <div>\r\n            <h1>App</h1>\r\n            <pre>{JSON.stringify(props, null, 2)}</pre>\r\n        </div>\r\n    )\r\n}\r\nexport default App\r\n\r\n\r\n//Servidor que recebe a validação da conexão, não vai para o frontEnd\r\nexport async function getServerSideProps ({ req, res }){\r\n    const session = await auth0.getSession(req)\r\n    const today = new Date()//linha 9 e 10 para pegar a data\r\n        const currentDate = \r\n            today.getFullYear() + '-' + today.getMonth() + '-' + today.getDay()\r\n    if (session){//aqui existe o usuário\r\n        const { user } = session;\r\n        const todaysCheckin = await db\r\n                .collection(\"markers\")\r\n                .doc(currentDate)\r\n                .collection(\"checks\")\r\n                .doc(user.sub)\r\n                .get();\r\n        const todaysData = todaysCheckin.data()\r\n        //variavel para constrolar se tem checkins\r\n        let forceCreate = true//começa verdadeiro\r\n        if(todaysData){\r\n            // se tem se torna false\r\n            //permanecer true não tem\r\n            forceCreate = false\r\n            //Trás nossa localização\r\n            const checkins = await db\r\n                .collection('markers')\r\n                .doc(currentDate)\r\n                .collection('checks')\r\n            //verifica os próximos\r\n            .near({\r\n            center: todaysData.coordinates,\r\n            radius: 1000//mil metros\r\n            })\r\n            .get()\r\n            //varrer os arquivos para pegar os dados.\r\n            checkins.docs.forEach(doc => {\r\n\r\n            })\r\n        }\r\n\r\n        return{\r\n            props:{\r\n                //caso a pessoa não loge\r\n                //se user for verdadeiro\r\n                isAuth: true,\r\n                user: session.user,\r\n                forceCreate\r\n            }\r\n        }\r\n    }\r\n    return{\r\n        props:{//Caso a pessoa não logou volta falso\r\n            isAuth: false,\r\n            user: {}\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}